/*
This is a demo task.

Write a function:

int solution(vector<int> &A);

that, given an array A of N integers, returns the smallest positive integer (greater than 0) that does not occur in A.

For example, given A = [1, 3, 6, 4, 1, 2], the function should return 5.

Given A = [1, 2, 3], the function should return 4.

Given A = [−1, −3], the function should return 1.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..100,000];
each element of array A is an integer within the range [−1,000,000..1,000,000].
*/

Find the smallest positive integer that does not occur in a given sequence


// you can use includes, for example:
#include <algorithm>

// you can write to stdout for debugging purposes, e.g.
// cout << "this is a debug message" << endl;

#include <algorithm>
#include <vector>
#include <iostream>
int solution(vector<int> &A) {
    // write your code in C++14 (g++ 6.2.0)
    std::sort(A.begin(), A.end());
    A.erase(std::unique(A.begin(), A.end()), A.end());

    //Remove all ints < 1
    vector<int> v;
    v.reserve(A.size());
    for(const auto& i : A){
        if( i > 0)
        v.push_back(i);
    }

    //Edge case: All ints were < 1 or all ints were > 1
    if(v.size() == 0 || v.at(0) != 1){
        return 1;
    }

    //Edge case: vector contains only one element
    if(v.size() == 1){
        return (v.at(0) != 1 ? 1:2);
    }

    for(unsigned int i=0; i<v.size(); ++i){
        if((unsigned int)v.at(i) != i+1)
            return v.at(i-1)+1;
    }
    return v.back() + 1;
}


